import * as React from "react";
import { Stage, Layer, Text, Image } from "react-konva";
import TextLayer from "./TextLayer";
import useImage from "use-image";

const CANVAS_WIDTH = 500;
const CANVAS_HEIGHT = 500;
const BobaCanvas = (props: {
  text: string;
  fontSize: number;
  onImageChange: (img: string) => void;
}) => {
  const [image] = useImage("/bobaexploitable.png");
  const [overlay] = useImage("/bobaexploitable_overlay.png");
  const stageRef = React.useRef();
  const [textLayer, setTextLayer] = React.useState({
    top_x: 79,
    top_y: 244,
    bottom_x: 343,
    bottom_y: 418,
    rotation: 7,
    align: "center",
    fragments: [
      { displayText: props.text, color: "black", size: props.fontSize || 70 },
    ],
  });

  React.useEffect(() => {
    function fitStageIntoParentContainer() {
      // @ts-ignore
      const stage = stageRef.current?.getStage();
      const container = document.body;
      // now we need to fit stage into parent
      var containerWidth = Math.min(container.offsetWidth, CANVAS_WIDTH);
      // to do this we need to scale the stage
      var scale = containerWidth / CANVAS_WIDTH;

      stage.width(CANVAS_WIDTH * scale);
      stage.height(CANVAS_HEIGHT * scale);
      stage.scale({ x: scale, y: scale });
      stage.draw();
    }

    fitStageIntoParentContainer();
    // adapt the stage on any window resize
    window.addEventListener("resize", fitStageIntoParentContainer);

    return () => {
      window.removeEventListener("resize", fitStageIntoParentContainer);
    };
  }, []);

  const currentText = props.text;
  const currentFontSize = props.fontSize;
  React.useEffect(() => {
    setTextLayer({
      ...textLayer,
      fragments: [
        {
          ...textLayer.fragments[0],
          displayText: currentText,
          size: currentFontSize,
        },
      ],
    });
    // @ts-ignore
    const stage = stageRef.current?.getStage();
    // Super brittle, but yolo
    setTimeout(() => {
      props.onImageChange(
        stage.toDataURL({
          pixelRatio: 2, // or other value you need
        })
      );
    }, 500);
  }, [currentText, currentFontSize]);
  return (
    <Stage width={CANVAS_WIDTH} height={CANVAS_HEIGHT} ref={stageRef}>
      {image && (
        <Layer>
          <Image image={image} height={CANVAS_HEIGHT} width={CANVAS_WIDTH} />
        </Layer>
      )}
      <TextLayer
        text={textLayer}
        id="x"
        // selected
        updateTextLayer={(id, layer) => setTextLayer(layer)}
      />
      {overlay && (
        <Layer>
          <Image image={overlay} height={CANVAS_HEIGHT} width={CANVAS_WIDTH} />
        </Layer>
      )}
    </Stage>
  );
};

export default BobaCanvas;
